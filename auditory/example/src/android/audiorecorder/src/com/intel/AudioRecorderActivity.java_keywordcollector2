package intel.com;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayDeque;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.text.format.Time;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.Spinner;
import android.widget.Toast;

import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;


public class AudioRecorderActivity extends Activity {
	private final static String TAG = "AudioRecorderActivity";

	private Button      startBt;
	private Button      stopBt;
	private int         audioSource                 = MediaRecorder.AudioSource.MIC;
	private static int  sampleRateInHz              = 16000;
	private static int  channelConfig               = AudioFormat.CHANNEL_IN_MONO;
	private static int  audioFormat                 = AudioFormat.ENCODING_PCM_16BIT;
	private int         bufferSizeInBytes           = 0;
	private AudioRecord audioRecord                 = null;
	private boolean     isRecord                    = false;
	private String      audioName                   = "";
	private String      newAudioName                = "";
	private String      strKeyword 	                = "";
	private String      strPersonID                 = "";
	private ProgressBar progressBar;

	private byte[]      audioBuf;

	private int         speechTimes                 = 1;

	private ArrayDeque<Integer>  empty = new ArrayDeque<Integer>( 2 );
	private ArrayDeque<Integer>  fill  = new ArrayDeque<Integer>( 2 );


	private Time     time = new Time( "GMT+8" );
	private Spinner spinner1;
	private Spinner spinner2;
	@Override
	public void onCreate( Bundle savedInstanceState )
	{
		super.onCreate( savedInstanceState );
		setContentView( R.layout.main );
		startBt = (Button)this.findViewById( R.id.onButton );
		stopBt  = (Button)this.findViewById( R.id.offButton );
		progressBar = (ProgressBar)this.findViewById( R.id.Recording );
		progressBar.setVisibility( 4 );
		startBt.setOnClickListener( new TestAudioListener() );
		stopBt.setOnClickListener( new TestAudioListener() );

		spinner1 = (Spinner)findViewById( R.id.person_spinner );
		spinner2 = (Spinner)findViewById( R.id.keyword_spinner );
		ArrayAdapter <CharSequence> adapter = ArrayAdapter.createFromResource( this, R.array.personID_array, android.R.layout.simple_spinner_item );
		adapter.setDropDownViewResource( android.R.layout.simple_spinner_dropdown_item );

		spinner1.setAdapter( adapter );
		spinner1.setPrompt( "来宾序列" );
		spinner1.setOnItemSelectedListener( new Spinner1OnItemSelectListener() );

		ArrayAdapter <CharSequence> adapter2 = ArrayAdapter.createFromResource( this, R.array.keyword_array, android.R.layout.simple_spinner_item );
		adapter2.setDropDownViewResource( android.R.layout.simple_spinner_dropdown_item );
		spinner2.setAdapter( adapter2 );
		spinner2.setPrompt( "Keyword" );
		spinner2.setOnItemSelectedListener( new Spinner2OnItemSelectListener() );
	}

	class Spinner1OnItemSelectListener implements OnItemSelectedListener
	{
	    public void onItemSelected( AdapterView<?> AdapterView, View view, int position, long arg3 )
	    {
		String selected = AdapterView.getItemAtPosition(position).toString();
		strPersonID = selected;
		speechTimes = 0;
	    }

	    public void onNothingSelected( AdapterView<?> arg0 )
	    {
	    }
	}

	class Spinner2OnItemSelectListener implements OnItemSelectedListener
	{
	    public void onItemSelected( AdapterView<?> AdapterView, View view, int position, long arg3 )
	    {
	        String selected = AdapterView.getItemAtPosition(position).toString();
	        strKeyword  = selected;
	        speechTimes = 0;
	    }

	    public void onNothingSelected( AdapterView<?> arg0 )
	    {
	    }
	}

	private void creatAudioRecord()
	{
		Log.i( TAG, "=========creatAudioRecord()===========" );
		bufferSizeInBytes = AudioRecord.getMinBufferSize( sampleRateInHz, channelConfig, audioFormat ) * 5 ;
		audioBuf = new byte[bufferSizeInBytes * 2];
		audioRecord = new AudioRecord( audioSource, sampleRateInHz, channelConfig, audioFormat, bufferSizeInBytes );
	}

	private void popDialog()
	{
		Runnable r = new Runnable()
		{
			public void run()
			{
				newAudioName = newAudioName + strPersonID + "-" + strKeyword +"-"+ String.valueOf( speechTimes ) + "_16k"+ ".wav";
				Toast.makeText( getApplicationContext(), newAudioName, Toast.LENGTH_SHORT ).show();
				copyWaveFile( audioName, newAudioName );
			}
		};
		this.runOnUiThread( r );
	}

	class TestAudioListener implements OnClickListener
	{
		public void onClick( View v )
		{
			if ( v == startBt )
			{
				creatAudioRecord();
				startRecord();
				progressBar.setVisibility( 0 );
			}
			if ( v == stopBt )
			{
				stopRecord();
				speechTimes++;
				progressBar.setVisibility( 4 );
			}
		}
	}

	private void startRecord()
	{
		// Log.i( TAG, "=========creatAudioRecord()===========1" );
		// long time = System.currentTimeMillis();
		// SimpleDateFormat formatter = new SimpleDateFormat( "yyyy-MM-dd hh:mm:ss" );
		// String date = formatter.format( new java.util.Date() );
		// Log.i( TAG, "=========creatAudioRecord()===========2" );
		time.setToNow();
		int year   = time.year;
		int month  = time.month + 1;
		int day    = time.monthDay;
		int hour   = time.hour;
		int minute = time.minute;
		int second = time.second;
		Log.d( TAG, "!!!year: " + year + " month: " + month + " day: " + day + " hour: " + hour + " minute: " + minute );

		audioName    = getString( R.string._sdcard_ ) + String.valueOf( year ) + String.valueOf( month ) + String.valueOf( day ) + String.valueOf( hour ) + String.valueOf( minute ) + String.valueOf( second ) + ".pcm";
		newAudioName = getString( R.string._sdcard_ ) ;
		empty.add( 0 );
		empty.add( 1 );
		audioRecord.startRecording();
		startBt.setClickable( false );
		isRecord = true;
		new Thread( new AudioRecordThread() ).start();
		new Thread( new AudioWriteThread() ).start();
	}

	private void stopRecord()
	{
		startBt.setClickable( true );
		close();
	}

	private void close()
	{
		if ( audioRecord != null )
		{
			System.out.println( "stopRecord" );
			isRecord = false;
			audioRecord.stop();
			audioRecord.release();
			empty.clear();
			fill.clear();
			audioRecord = null;
		}
	}

	class AudioRecordThread implements Runnable
	{
		public void run()
		{
			readDataFromMic();
		}
	}

	class AudioWriteThread implements Runnable
	{
		public void run()
		{
			writeDataToFile();
			Log.i( TAG, newAudioName );
			popDialog();
		}
	}

	private void readDataFromMic()
	{
		int readSize = 0;

		while ( isRecord == true )
		{
			if ( empty.isEmpty() )
			{
				// Log.d( TAG, "%%%%%%%%%%%%%%%%%%%%%" );
				try
				{
					Thread.sleep( 1 );
				} catch ( InterruptedException e )
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				continue;
			}

			int idx = empty.remove();
			// Log.d( TAG, "read idx: " + idx );
			readSize = audioRecord.read( audioBuf, idx * bufferSizeInBytes, bufferSizeInBytes );
			if ( AudioRecord.ERROR_INVALID_OPERATION != readSize )
			{
				// notify file write thread
				fill.add( idx );
			}
		}
	}

	private void writeDataToFile()
	{
		FileOutputStream fos = null;

		try
		{
			File file = new File( audioName );
			if ( file.exists() )
			{
				file.delete();
			}
			fos = new FileOutputStream( file );
		}
		catch ( Exception e )
		{
			e.printStackTrace();
		}

		while ( isRecord == true )
		{
			if ( fill.isEmpty() )
			{
				// Log.d( TAG, "aaaaaaaaaaaaa" );
				try
				{
					Thread.sleep( 1 );
				}
				catch ( InterruptedException e )
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				continue;
			}

			int idx = fill.remove();
			// Log.d( TAG, "write idx: " + idx + ", bufferSizeInBytes: " + bufferSizeInBytes );
			try
			{
				fos.write( audioBuf, idx * bufferSizeInBytes, bufferSizeInBytes );
			}
			catch ( IOException e )
			{
				e.printStackTrace();
			}
			empty.add( idx );
		}

		try
		{
			fos.close();
		} catch ( IOException e )
		{
			e.printStackTrace();
		}
	}

	private void copyWaveFile( String inFilename, String outFilename )
	{
		FileInputStream in = null;
		FileOutputStream out = null;
		long totalAudioLen = 0;
		long totalDataLen = totalAudioLen + 36;
		long longSampleRate = sampleRateInHz;
		int  channels = 1;
		long byteRate = 16 * sampleRateInHz * channels / 8;
		byte[] data = new byte[bufferSizeInBytes];
		try
		{
			in = new FileInputStream( inFilename );
			out = new FileOutputStream( outFilename );
			totalAudioLen = in.getChannel().size();
			totalDataLen = totalAudioLen + 36;
			WriteWaveFileHeader( out, totalAudioLen, totalDataLen,
			                     longSampleRate, channels, byteRate );
			while ( in.read( data ) != -1 )
			{
				out.write( data );
			}
			in.close();
			out.close();
		}
		catch ( FileNotFoundException e )
		{
			e.printStackTrace();
		}
		catch ( IOException e )
		{
			e.printStackTrace();
		}
	}

	private void WriteWaveFileHeader( FileOutputStream out, long totalAudioLen,
	                                  long totalDataLen, long longSampleRate, int channels, long byteRate )
	throws IOException
	{
		byte[] header = new byte[44];
		header[0] = 'R'; // RIFF/WAVE header
		header[1] = 'I';
		header[2] = 'F';
		header[3] = 'F';
		header[4] = (byte)(totalDataLen & 0xff);
		header[5] = (byte)((totalDataLen >> 8) & 0xff);
		header[6] = (byte)((totalDataLen >> 16) & 0xff);
		header[7] = (byte)((totalDataLen >> 24) & 0xff);
		header[8] = 'W';
		header[9] = 'A';
		header[10] = 'V';
		header[11] = 'E';
		header[12] = 'f'; // 'fmt' chunk
		header[13] = 'm';
		header[14] = 't';
		header[15] = ' ';
		header[16] = 16; // 4 bytes: size of 'fmt ' chunk
		header[17] = 0;
		header[18] = 0;
		header[19] = 0;
		header[20] = 1; // format = 1
		header[21] = 0;
		header[22] = (byte)channels;
		header[23] = 0;
		header[24] = (byte)(longSampleRate & 0xff);
		header[25] = (byte)((longSampleRate >> 8) & 0xff);
		header[26] = (byte)((longSampleRate >> 16) & 0xff);
		header[27] = (byte)((longSampleRate >> 24) & 0xff);
		header[28] = (byte)(byteRate & 0xff);
		header[29] = (byte)((byteRate >> 8) & 0xff);
		header[30] = (byte)((byteRate >> 16) & 0xff);
		header[31] = (byte)((byteRate >> 24) & 0xff);
		header[32] = (byte)(2 * 8 / 8); // block align
		header[33] = 0;
		header[34] = 16; // bits per sample
		header[35] = 0;
		header[36] = 'd';
		header[37] = 'a';
		header[38] = 't';
		header[39] = 'a';
		header[40] = (byte)(totalAudioLen & 0xff);
		header[41] = (byte)((totalAudioLen >> 8) & 0xff);
		header[42] = (byte)((totalAudioLen >> 16) & 0xff);
		header[43] = (byte)((totalAudioLen >> 24) & 0xff);
		out.write( header, 0, 44 );
	}


	@Override
	protected void onDestroy()
	{
		close();
		super.onDestroy();
	}
}

