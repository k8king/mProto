package com.intel.WakeOnVoice;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import android.app.Notification;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Intent;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioTrack;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.PowerManager;
import android.util.Log;

public class WakeOnVoiceService extends Service implements IAudioHandler{
	private static final String TAG = "ActivityService";
	private String file = "/sdcard/1339557592603female~4.wav";
	private AudioTrack m_out_trk;
	private int m_out_btes = 0;
	private boolean isplay = false;
	private PowerManager.WakeLock mWakeLock;
	private Thread t1 = null;
	private PowerManager pm;
	public static boolean isRunning = false;
	
	private static final int NOTIFICATION_ID = 1;

	@Override
	public void onCreate() {
		super.onCreate();
        m_out_btes = AudioTrack.getMinBufferSize(8000, AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT);
        m_out_trk = new AudioTrack(AudioManager.STREAM_MUSIC,8000,AudioFormat.CHANNEL_CONFIGURATION_MONO,AudioFormat.ENCODING_PCM_16BIT,
        		m_out_btes,AudioTrack.MODE_STREAM);
		isRunning = true;
		
		pm = (PowerManager) getSystemService(POWER_SERVICE);
		mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);
		mWakeLock.acquire();
		Notification notification = new Notification(R.drawable.ic_launcher, getText(R.string.app_name), System.currentTimeMillis());
		Intent notificationIntent = new Intent(this, WakeOnVoiceDemoActivity.class);
		notificationIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
		PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent, 0);
		notification.setLatestEventInfo(this, getText(R.string.app_name), "Select to open activity", pendingIntent);
		startForeground(NOTIFICATION_ID, notification);
        try
        {
	        Audio_Classifier_JNI.Inst.registerEventHandler(this);
			Audio_Classifier_JNI.Inst.initaudio();
			Audio_Classifier_JNI.Inst.startaudio();
        }
        catch (Exception exp)
        {
            Log.i("AudioRecoder1Activity", exp.toString());
        }
      
	}
	   public void playvoice()
	    {
	    	if(isplay == true)
	    		return;
	    	isplay = true;
	    	m_out_trk.play();
	    	byte[] data = new byte[m_out_btes];
	    	FileInputStream in = null;
	    	int ss = 0;
	    	try {
	            in = new FileInputStream(file);
				while(true)
				{
					if((ss = in.read(data))!= -1)
					{
						Log.i(TAG,"write"+"ss "+ss+"m_out_btes "+m_out_btes);
						m_out_trk.write(data, 0, data.length);
					}
					else
						break;
				}
	    	 }
	    	 catch (FileNotFoundException e) {
	             e.printStackTrace();
	         } catch (IOException e) {
	             e.printStackTrace();
	         }
	    	m_out_trk.stop();
	    	isplay = false;
	    }
		public void callback1()
	    {
	    	Log.i(TAG,"call_back1 male");
	    	t1 = new Thread( new Runnable()
	    	{
	    		public void run()
	    		{
	    			playvoice();
	    		}
	    	});
	    	t1.start();
	    	
	    	if(pm.isScreenOn())
	    		Log.i(TAG,"Screen On");
	    	else
	    	{
	    		Log.i(TAG,"Screen off");
	    		mWakeLock.release();
		    	mWakeLock = pm.newWakeLock(PowerManager.ACQUIRE_CAUSES_WAKEUP|PowerManager.SCREEN_DIM_WAKE_LOCK
		    			, TAG);
		    	mWakeLock.acquire();
	    	}
	    }

	    public void callback2() 
	    {
	    	Log.i(TAG,"call_back2 female");		
	    } 
	@Override
	public IBinder onBind(Intent arg0) {
		return null;
	}

	@Override
	public void onDestroy() {
		
		mWakeLock.release();
		isRunning = false;
		super.onDestroy();
		Audio_Classifier_JNI.Inst.stopaudio();
	}

}
